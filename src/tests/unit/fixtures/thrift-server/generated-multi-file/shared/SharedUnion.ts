/* tslint:disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.1.1
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "test-lib";
import * as __NAMESPACE__ from "./.";
export interface ISharedUnion {
    option1?: string;
    option2?: string;
    option3?: Set<thrift.Int64>;
}
export interface ISharedUnionArgs {
    option1?: string;
    option2?: string;
    option3?: Set<number | thrift.Int64>;
}
export const SharedUnionCodec: thrift.IStructCodec<ISharedUnionArgs, ISharedUnion> = {
    encode(args: ISharedUnionArgs, output: thrift.TProtocol): void {
        let _fieldsSet: number = 0;
        const obj = {
            option1: args.option1,
            option2: args.option2,
            option3: args.option3
        };
        output.writeStructBegin("SharedUnion");
        if (obj.option1 != null) {
            _fieldsSet++;
            output.writeFieldBegin("option1", thrift.TType.STRING, 1);
            output.writeString(obj.option1);
            output.writeFieldEnd();
        }
        if (obj.option2 != null) {
            _fieldsSet++;
            output.writeFieldBegin("option2", thrift.TType.STRING, 2);
            output.writeString(obj.option2);
            output.writeFieldEnd();
        }
        if (obj.option3 != null) {
            _fieldsSet++;
            output.writeFieldBegin("option3", thrift.TType.SET, 3);
            output.writeSetBegin(thrift.TType.I64, obj.option3.size);
            obj.option3.forEach((value_1: number | thrift.Int64): void => {
                output.writeI64(value_1);
            });
            output.writeSetEnd();
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        if (_fieldsSet > 1) {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.INVALID_DATA, "TUnion cannot have more than one value");
        }
        else if (_fieldsSet < 1) {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.INVALID_DATA, "TUnion must have one value set");
        }
        return;
    },
    decode(input: thrift.TProtocol): ISharedUnion {
        let _fieldsSet: number = 0;
        let _returnValue: ISharedUnion | null = null;
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.STRING) {
                        _fieldsSet++;
                        const value_2: string = input.readString();
                        _returnValue = { option1: value_2 };
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.STRING) {
                        _fieldsSet++;
                        const value_3: string = input.readString();
                        _returnValue = { option2: value_3 };
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.TType.SET) {
                        _fieldsSet++;
                        const value_4: Set<thrift.Int64> = new Set<thrift.Int64>();
                        const metadata_1: thrift.IThriftSet = input.readSetBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_5: thrift.Int64 = input.readI64();
                            value_4.add(value_5);
                        }
                        input.readSetEnd();
                        _returnValue = { option3: value_4 };
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_fieldsSet > 1) {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.INVALID_DATA, "TUnion cannot have more than one value");
        }
        else if (_fieldsSet < 1) {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.INVALID_DATA, "TUnion must have one value set");
        }
        if (_returnValue !== null) {
            return _returnValue;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Unable to read data for TUnion");
        }
    }
};
export class SharedUnion extends thrift.StructLike implements ISharedUnion {
    public option1?: string;
    public option2?: string;
    public option3?: Set<thrift.Int64>;
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: ISharedUnionArgs = {}) {
        super();
        let _fieldsSet: number = 0;
        if (args.option1 != null) {
            _fieldsSet++;
            const value_6: string = args.option1;
            this.option1 = value_6;
        }
        if (args.option2 != null) {
            _fieldsSet++;
            const value_7: string = args.option2;
            this.option2 = value_7;
        }
        if (args.option3 != null) {
            _fieldsSet++;
            const value_8: Set<thrift.Int64> = new Set<thrift.Int64>();
            args.option3.forEach((value_9: number | thrift.Int64): void => {
                const value_10: thrift.Int64 = (typeof value_9 === "number" ? new thrift.Int64(value_9) : value_9);
                value_8.add(value_10);
            });
            this.option3 = value_8;
        }
        if (_fieldsSet > 1) {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.INVALID_DATA, "TUnion cannot have more than one value");
        }
        else if (_fieldsSet < 1) {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.INVALID_DATA, "TUnion must have one value set");
        }
    }
    public static read(input: thrift.TProtocol): SharedUnion {
        return new SharedUnion(SharedUnionCodec.decode(input));
    }
    public static write(args: ISharedUnionArgs, output: thrift.TProtocol): void {
        return SharedUnionCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return SharedUnionCodec.encode(this, output);
    }
}
