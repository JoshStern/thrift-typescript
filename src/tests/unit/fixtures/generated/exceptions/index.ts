/* tslint:disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v2.0.0-8
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "@creditkarma/thrift-server-core";
import * as shared from "./../shared";
export interface IInvalidOperation {
    whatOp?: number;
    why?: string;
}
export interface IInvalidOperation_Loose {
    whatOp?: number;
    why?: string;
}
export const InvalidOperationCodec: thrift.IStructCodec<IInvalidOperation_Loose, IInvalidOperation> = {
    encode(args: IInvalidOperation_Loose, output: thrift.TProtocol): void {
        const obj = {
            whatOp: args.whatOp,
            why: args.why
        };
        output.writeStructBegin("InvalidOperation");
        if (obj.whatOp != null) {
            output.writeFieldBegin("whatOp", thrift.TType.I32, 1);
            output.writeI32(obj.whatOp);
            output.writeFieldEnd();
        }
        if (obj.why != null) {
            output.writeFieldBegin("why", thrift.TType.STRING, 2);
            output.writeString(obj.why);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): IInvalidOperation {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.I32) {
                        const value_1: number = input.readI32();
                        _args.whatOp = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.STRING) {
                        const value_2: string = input.readString();
                        _args.why = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return {
            whatOp: _args.whatOp,
            why: _args.why
        };
    }
};
export class InvalidOperation extends thrift.StructLike  implements IInvalidOperation_Loose {
    public whatOp?: number;
    public why?: string;
    constructor(args: IInvalidOperation_Loose = {}) {
        super();
        if (args.whatOp != null) {
            this.whatOp = args.whatOp;
        }
        if (args.why != null) {
            this.why = args.why;
        }
    }
    public static read(input: thrift.TProtocol): InvalidOperation {
        return new InvalidOperation(InvalidOperationCodec.decode(input));
    }
    public write(output: thrift.TProtocol): void {
        return InvalidOperationCodec.encode(this, output);
    }
}
export interface IInvalidResult {
    message?: string;
    code?: shared.ICode;
}
export interface IInvalidResult_Loose {
    message?: string;
    code?: shared.ICode_Loose;
}
export const InvalidResultCodec: thrift.IStructCodec<IInvalidResult_Loose, IInvalidResult> = {
    encode(args: IInvalidResult_Loose, output: thrift.TProtocol): void {
        const obj = {
            message: args.message,
            code: args.code
        };
        output.writeStructBegin("InvalidResult");
        if (obj.message != null) {
            output.writeFieldBegin("message", thrift.TType.STRING, 1);
            output.writeString(obj.message);
            output.writeFieldEnd();
        }
        if (obj.code != null) {
            output.writeFieldBegin("code", thrift.TType.STRUCT, 2);
            shared.CodeCodec.encode(obj.code, output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): IInvalidResult {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.STRING) {
                        const value_3: string = input.readString();
                        _args.message = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_4: shared.ICode = shared.CodeCodec.decode(input);
                        _args.code = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return {
            message: _args.message,
            code: _args.code
        };
    }
};
export class InvalidResult extends thrift.StructLike  implements IInvalidResult_Loose {
    public message?: string;
    public code?: shared.ICode_Loose;
    constructor(args: IInvalidResult_Loose = {}) {
        super();
        if (args.message != null) {
            this.message = args.message;
        }
        if (args.code != null) {
            this.code = args.code;
        }
    }
    public static read(input: thrift.TProtocol): InvalidResult {
        return new InvalidResult(InvalidResultCodec.decode(input));
    }
    public write(output: thrift.TProtocol): void {
        return InvalidResultCodec.encode(this, output);
    }
}
