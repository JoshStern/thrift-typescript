/* tslint:disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v2.0.0-8
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "@creditkarma/thrift-server-core";
import * as shared from "./../shared";
export import ICommonStruct = shared.ISharedStruct;
export import ICommonStruct_Loose = shared.ISharedStruct_Loose;
export import CommonStruct = shared.SharedStruct;
export import CommonStructCodec = shared.SharedStructCodec;
export import ICommonUnion = shared.ISharedUnion;
export import ICommonUnion_Loose = shared.ISharedUnion_Loose;
export import CommonUnion = shared.SharedUnion;
export import CommonUnionCodec = shared.SharedUnionCodec;
export import COMMON_INT = shared.SHARED_INT;
export interface IAuthException {
    code?: number;
    message?: string;
}
export interface IAuthException_Loose {
    code?: number;
    message?: string;
}
export const AuthExceptionCodec: thrift.IStructCodec<IAuthException_Loose, IAuthException> = {
    encode(args: IAuthException_Loose, output: thrift.TProtocol): void {
        const obj = {
            code: args.code,
            message: args.message
        };
        output.writeStructBegin("AuthException");
        if (obj.code != null) {
            output.writeFieldBegin("code", thrift.TType.I32, 1);
            output.writeI32(obj.code);
            output.writeFieldEnd();
        }
        if (obj.message != null) {
            output.writeFieldBegin("message", thrift.TType.STRING, 2);
            output.writeString(obj.message);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): IAuthException {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.I32) {
                        const value_1: number = input.readI32();
                        _args.code = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.STRING) {
                        const value_2: string = input.readString();
                        _args.message = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return {
            code: _args.code,
            message: _args.message
        };
    }
};
export class AuthException extends thrift.StructLike  implements IAuthException_Loose {
    public code?: number;
    public message?: string;
    constructor(args: IAuthException_Loose = {}) {
        super();
        if (args.code != null) {
            this.code = args.code;
        }
        if (args.message != null) {
            this.message = args.message;
        }
    }
    public static read(input: thrift.TProtocol): AuthException {
        return new AuthException(AuthExceptionCodec.decode(input));
    }
    public write(output: thrift.TProtocol): void {
        return AuthExceptionCodec.encode(this, output);
    }
}
