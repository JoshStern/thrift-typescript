import * as ts from 'typescript'
import thriftParser = require('thrift-parser');

import * as path from 'path';

import readFile from './filesystem/read-file';

import {
  IDLNode,
  resolveIDLs
} from './resolve/idls';

import { identifiers as _id } from './ast/identifiers';

export interface IDLFile {
  filename: string;
  idl: JsonAST
}

export function parseFile(fileName: string): Promise<IDLFile> {
  return readFile(fileName).then(idl => {
    const output: IDLFile = {
      filename: path.relative(process.cwd(), fileName),
      idl: thriftParser(idl)
    };
    return output;
  });
}

function generateModuleFile(idl: IDLNode) {
  let bodyFile = ts.createSourceFile(`${idl.filename}.ts`, '', ts.ScriptTarget.ES5, false, ts.ScriptKind.TS);
  bodyFile = ts.updateSourceFileNode(bodyFile, [idl.toAST()]);

  return bodyFile;
}

function generatePreface() {
  let prefaceFile = ts.createSourceFile('preface.ts', '', ts.ScriptTarget.ES5, false, ts.ScriptKind.TS);

  const _thriftImport = ts.createImportClause(undefined, ts.createNamedImports([
    ts.createImportSpecifier(undefined, _id.Thrift)
  ]));
  let _require = ts.createImportDeclaration(undefined, undefined, _thriftImport, ts.createLiteral('thrift'));

  _require = ts.addSyntheticLeadingComment(_require, ts.SyntaxKind.SingleLineCommentTrivia, '', false);
  _require = ts.addSyntheticLeadingComment(_require, ts.SyntaxKind.SingleLineCommentTrivia, ' Autogenerated by thrift-typescript', false);
  _require = ts.addSyntheticLeadingComment(_require, ts.SyntaxKind.SingleLineCommentTrivia, '', false);
  _require = ts.addSyntheticLeadingComment(_require, ts.SyntaxKind.SingleLineCommentTrivia, ' DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING', false);
  _require = ts.addSyntheticLeadingComment(_require, ts.SyntaxKind.SingleLineCommentTrivia, '', true);

  prefaceFile = ts.updateSourceFileNode(prefaceFile, [
    _require
  ]);

  return prefaceFile;
}

function generateTypescript(files: ts.SourceFile[]) {
  const printer = ts.createPrinter();

  return printer.printBundle(ts.createBundle(files));
}

function getIncludes(file) {
  const includes = file.idl.include || {};
  const dir = path.dirname(file.filename);
  return Object.keys(includes).map((inc) => {
    let filename = file.idl.include[inc].path;
    if (!path.extname(filename)) {
      filename = filename + '.thrift';
    }
    return path.resolve(dir, filename)
  });
}

export async function generateIDLTypes(filename: string): Promise<string> {
  let parsed = await parseFile(filename);

  let parsedFiles: IDLFile[] = [];

  if (parsed.idl.include) {
    const includes = getIncludes(parsed);
    parsedFiles = await Promise.all(includes.map(parseFile));
  }

  parsedFiles.push(parsed);

  const resolved = resolveIDLs(parsedFiles).map(generateModuleFile);

  const files = [generatePreface()].concat(resolved);

  return generateTypescript(files);
}
