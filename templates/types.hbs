//
// Autogenerated by thrift-typescript
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
import thrift = require("thrift");
import Thrift = thrift.Thrift;
{{#each this}}
export class {{capitalize name}} {
    public success: boolean;
    {{#each fields}}
    public {{name}}: {{tsType type}} = null;
    {{/each}}
    constructor(args?) {
        if (args) {
            {{#each fields}}
            if (args.{{name}} != null) {
                this.{{name}} = args.{{name}};
            }
            else {
                throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, "Required field {{name}} is unset!");
            }
            {{/each}}
        }
    }
    public read(input) {
        input.readStructBegin();
        while (true) {
            const ret = input.readFieldBegin();
            const fname = ret.fname;
            const ftype = ret.ftype;
            const fid = ret.fid;
            if (ftype === Thrift.Type.STOP) {
                break;
            }
            {{#if fields}}
            switch (fid) {
                {{#each fields}}
                case {{id}}: {
                    if (ftype === Thrift.Type.{{upcase type}}) {
                        this.{{name}} = input.read{{capitalize type}}();
                    }
                    else {
                        input.skip(ftype);
                    }
                    break;
                }
                {{/each}}
                default: {
                    input.skip(ftype);
                }
            }
            {{else}}
            input.skip(ftype);
            {{/if}}
            input.readFieldEnd();
        }
        input.readStructEnd();
    }
    public write(output) {
        output.writeStructBegin("{{capitalize name}}");
        {{#each fields}}
        if (this.{{name}} != null) {
            output.writeFieldBegin("{{name}}", Thrift.Type.{{upcase type}}, {{id}});
            output.write{{capitalize type}}(this.{{name}});
            output.writeFieldEnd();
        }
        {{/each}}
        output.writeFieldStop();
        output.writeStructEnd();
    }
};
{{/each}}
