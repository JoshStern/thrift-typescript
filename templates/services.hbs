//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
const thrift = require("thrift");
const Thrift = thrift.Thrift;
const Q = thrift.Q;

// HELPER FUNCTIONS AND STRUCTURES
{{#each params}}
class {{../name}}{{upcase name}}Args {
  public x: number;
  public y: number;

  constructor(args?) {
    this.x = null;
    this.y = null;
    if (args) {
      if (args.x !== undefined && args.x !== null) {
        this.x = args.x;
      }
      if (args.y !== undefined && args.y !== null) {
        this.y = args.y;
      }
    }
  }

  public read(input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const fname = ret.fname;
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype === Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
          if (ftype === Thrift.Type.I32) {
            this.x = input.readI32();
          } else {
            input.skip(ftype);
          }
          break;
        case 2:
          if (ftype === Thrift.Type.I32) {
            this.y = input.readI32();
          } else {
            input.skip(ftype);
          }
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  public write(output) {
    output.writeStructBegin("{{../name}}{{upcase name}}Args");
    if (this.x !== null && this.x !== undefined) {
      output.writeFieldBegin("x", Thrift.Type.I32, 1);
      output.writeI32(this.x);
      output.writeFieldEnd();
    }
    if (this.y !== null && this.y !== undefined) {
      output.writeFieldBegin("y", Thrift.Type.I32, 2);
      output.writeI32(this.y);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
}

class {{../name}}{{upcase name}}Result {
  public success: boolean;

  constructor(args?) {
    this.success = null;
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
    }
  }

  public read(input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const fname = ret.fname;
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype === Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
          if (ftype === Thrift.Type.I32) {
            this.success = input.readI32();
          } else {
            input.skip(ftype);
          }
          break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  public write(output) {
    output.writeStructBegin("{{../name}}{{upcase name}}Result");
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin("success", Thrift.Type.I32, 0);
      output.writeI32(this.success);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
}

class {{../name}}Client {
  public output;
  public pClass;
  private _seqid;
  private _reqs;

  constructor(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
  }

  public seqid() {
    return this._seqid;
  }

  public new_seqid() {
    return this._seqid += 1;
  }

  public {{name}}(x: number, y: number, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      let defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
         defer.reject(error);
        } else {
         defer.resolve(result);
        }
      };
      this.send_{{name}}(x, y);
      return defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_{{name}}(x, y);
    }
  }

  public send_{{name}}(x: number, y: number) {
    const output = new this.pClass(this.output);
    output.writeMessageBegin("{{name}}", Thrift.MessageType.CALL, this.seqid());
    const args = new {{../name}}{{name}}Args();
    args.x = x;
    args.y = y;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }

  public recv_{{name}} (input, mtype, rseqid) {
    const noop = () => null;
    let callback = this._reqs[rseqid] || noop;
    delete this._reqs[rseqid];
    if (mtype === Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new {{../name}}{{name}}Result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback("{{name}} failed: unknown result");
  }
}
{{/each}}

class {{serviceName}}Processor {
  private _handler;

  constructor(handler) {
    this._handler = handler;
  }

  public process(input, output) {
    const r = input.readMessageBegin();
    if (this["process_" + r.fname]) {
      return this["process_" + r.fname].call(this, r.rseqid, input, output);
    } else {
      input.skip(Thrift.Type.STRUCT);
      input.readMessageEnd();
      const err = `Unknown function ${r.fname}`;
      const x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, err);
      output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
      x.write(output);
      output.writeMessageEnd();
      output.flush();
    }
  }

  public process_{{name}}(seqid, input, output) {
    const args = new {{serviceName}}{{name}}Args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.{{name}}.length === 2) {
      Q.fcall(this._handler.{{name}}, args.x, args.y).then((data) => {
          const result = new {{serviceName}}{{name}}Result({success: data});
          output.writeMessageBegin("{{name}}", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, (err) => {
          const result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("{{name}}", Thrift.MessageType.EXCEPTION, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.{{name}}(args.x, args.y, (err, data) => {
        let result;
        if (err == null) {
          result = new {{serviceName}}{{name}}Result((err != null ? err : {success: data}));
          output.writeMessageBegin("{{name}}", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("{{name}}", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
}

export { {{serviceName}}Processor as Processor }
export { {{serviceName}}Client as Client }
